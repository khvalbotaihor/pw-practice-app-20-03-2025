# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: UI Components >> radio buttons 2
- Location: /Users/ihor/Desktop/pw-practice-app-20-03-2025/tests/uiComponents.spec.ts:62:10

# Error details

```
Error: locator.click: Test ended.
Call log:
  - waiting for getByText('Forms')

    at /Users/ihor/Desktop/pw-practice-app-20-03-2025/tests/uiComponents.spec.ts:15:35
```

# Test source

```ts
   1 | import test, { expect } from "playwright/test";
   2 | import { filter } from "rxjs-compat/operator/filter";
   3 |
   4 | // test.describe.configure({ mode: "parallel" });
   5 |
   6 |
   7 |
   8 | test.beforeEach(async ({ page }) => {
   9 |   await page.goto("/");
   10 | });
   11 |
   12 | test.describe("UI Components", async () => {
   13 |   test.describe.configure({retries: 2});
   14 |   test.beforeEach(async ({ page }) => {
>  15 |     await page.getByText("Forms").click();
      |                                   ^ Error: locator.click: Test ended.
   16 |     await page.getByText("Form Layouts").click();
   17 |   });
   18 |
   19 |   test("input fields", async ({ page }, testInfo) => {
   20 |     if (testInfo.retry) {
   21 |       //to do smt
   22 |     }
   23 |     const usingTheGridEmailInput = page
   24 |       .locator("nb-card", { hasText: "Using the Grid" })
   25 |       .getByRole("textbox", { name: "Email" });
   26 |
   27 |     await usingTheGridEmailInput.fill(process.env.USERNAME);
   28 |     await usingTheGridEmailInput.clear();
   29 |     await usingTheGridEmailInput.pressSequentially("test2@test.com", {
   30 |       delay: 500,
   31 |     });
   32 |
   33 |     // generic assertion
   34 |
   35 |     const inputValue = await usingTheGridEmailInput.inputValue();
   36 |     expect(inputValue).toEqual("test2@test.com");
   37 |
   38 |     // locator assertion
   39 |     await expect(usingTheGridEmailInput).toHaveValue("test2@test.com");
   40 |   });
   41 |
   42 |   test("radio buttons", async ({ page }) => {
   43 |     const usingTheGridFrom = page.locator("nb-card", {
   44 |       hasText: "Using the Grid",
   45 |     });
   46 |     await usingTheGridFrom.getByLabel("Option 1").check({ force: true });
   47 |     await usingTheGridFrom
   48 |       .getByRole("radio", { name: "Option 2" })
   49 |       .check({ force: true });
   50 |
   51 |     const radioStatus = await usingTheGridFrom
   52 |       .getByRole("radio", { name: "Option 2" })
   53 |       .isChecked();
   54 |     expect(radioStatus).toBeTruthy();
   55 |     expect(
   56 |       await usingTheGridFrom
   57 |         .getByRole("radio", { name: "Option 1" })
   58 |         .isChecked()
   59 |     ).toBeFalsy();
   60 |   });
   61 |
   62 |     test.only("radio buttons 2", async ({ page }) => {
   63 |     const usingTheGridFrom = page.locator("nb-card", {hasText: "Using the Grid"});
   64 |
   65 |     await usingTheGridFrom.getByLabel("Option 1").check({ force: true });
   66 |
   67 |     const radioStatus = await usingTheGridFrom.getByRole("radio", { name: "Option 1" }).isChecked();
   68 |       //expect(radioStatus).toBeTruthy();
   69 |     await expect(usingTheGridFrom).toHaveScreenshot()
   70 |
   71 |
   72 |   });
   73 | });
   74 |
   75 | test("checkboxes", async ({ page }) => {
   76 |   await page.getByText("Modal & Overlays").click();
   77 |   await page.getByText("Toastr").click();
   78 |
   79 |   await page
   80 |     .getByRole("checkbox", { name: "Hide on click" })
   81 |     .click({ force: true });
   82 |   await page
   83 |     .getByRole("checkbox", { name: "Prevent arising of duplicate toast" })
   84 |     .check({ force: true });
   85 |   await page
   86 |     .getByRole("checkbox", { name: "Show toast with icon" })
   87 |     .uncheck({ force: true });
   88 |
   89 |   const allBoxes = await page.getByRole("checkbox");
   90 |   for (const checkbox of await allBoxes.all()) {
   91 |     await checkbox.uncheck({ force: true });
   92 |     expect(await checkbox.isChecked()).toBeFalsy();
   93 |   }
   94 | });
   95 |
   96 | test("list and drop-down", async ({ page }) => {
   97 |   const buttonThemeButton = page.locator("ngx-header nb-select");
   98 |
   99 |   const defaultTheme = page.locator('[ng-reflect-value="default"]');
  100 |   const darkTheme = page.locator('[ng-reflect-value="dark"]');
  101 |   const optionList = page.locator("nb-option-list nb-option");
  102 |
  103 |   await buttonThemeButton.click();
  104 |   await darkTheme.click();
  105 |   expect(await buttonThemeButton).toHaveText("Dark");
  106 |   const header = page.locator("nb-layout-header");
  107 |   await expect(header).toHaveCSS("background-color", "rgb(34, 43, 69)");
  108 |
  109 |   await buttonThemeButton.click();
  110 |
  111 |   await expect(optionList).toHaveText(["Light", "Dark", "Cosmic", "Corporate"]);
  112 |   await optionList.filter({ hasText: "Cosmic" }).click();
  113 |
  114 |   const colors = {
  115 |     Light: "rgb(255, 255, 255)",
```